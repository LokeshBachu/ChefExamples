

First create the repository chef-repo.

mkdir chef-repo

reate the MOTD file

create a file named hello.rb, add these contents, and then save the file.

file '/tmp/motd' do
  content 'hello world'
end

chef-client --local-mode hello.rb

more /tmp/motd


apply one more time

hello.rb

file '/tmp/motd' do
  content 'hello chef'
end

apply it

This time Chef applies the action because you've changed the desired state of the file

echo 'hello robots' > /tmp/motd

apply it


Chef restored the original configuration. This is actually a really good thing because Chef ensures that the actual state of your resource matches what you specify, even if it is altered by some outside process. Chef enables you to both apply a new configuration state as well as ensure that the current state stays how you want it.

  In practice, it's common to configure chef-client to act as a service that runs periodically or as part of a continuous delivery system such as Chef Automate. Running Chef through automation helps to ensure that your servers remain configured as you expect and also enables them to be reconfigured when you need them to be.
5. Delete the MOTD file

delete the MOTD file

delete.rb

file '/tmp/motd' do
  action :delete
end

apply it

more /tmp/motd


Resources describe the what, not the how

A recipe is a file that holds one or more resources. Each resource declares what state a part of the system should be in, but not how to get there. Chef handles these complexities for you.

In this lesson, you declared that the file /tmp/motd must exist and what its contents are, but you didn't specify how to create or write to the file. This layer of abstraction can not only make you more productive, but it can also make your work more portable across platforms.

Resources have actions

When you deleted the file, you saw the :delete action.

Think of an action as the process that achieves the desired configuration state. Every resource in Chef has a default action, and it's often the most common affirmative one â€“ for example, create a file, install a package, and start a service.

When we created the file we didn't specify the :create action because :create is the default. But of course you can specify it if you want.

Recipes organize resources

In Chef, hello.rb is an example of a recipe, or an ordered series of configuration states. A recipe typically contains related states, such as everything needed to configure a web server, database server, or a load balancer.


webserver.rb


apt_update 'Update the apt cache daily' do
  frequency 86_400
  action :periodic
end

In a production environment, you might run Chef periodically to ensure your systems are kept up to date. As an example, you might run Chef multiple times in a day. However, you likely don't need to update the apt cache every time you run Chef. The frequency property specifies how often to update the apt cache (in seconds.) Here, we specify 86,400 seconds to update the cache once every 24 hours. (The _ notation is a Ruby convention that helps make numeric values more readable.)

The :periodic action means that the update occurs periodically. Another option would be to use the :update action to update the apt cache each time Chef runs.



Install the Apache package

apt_update 'Update the apt cache daily' do
  frequency 86_400
  action :periodic
end

package 'apache2'(add it)

note: don't need to specify an action because :install is the default.

 chef-client --local-mode webserver.rb
 
 Start and enable the Apache service

Now let's first enable the Apache service when the server boots and then start the service. Modify webserver.rb to look like this.


apt_update 'Update the apt cache daily' do
  frequency 86_400
  action :periodic
end

package 'apache2'

service 'apache2' do
  supports :status => true
  action [:enable, :start]
end

file '/var/www/html/index.html' do
  content '<html>
  <body>
    <h1>hello world</h1>
  </body>
</html>'
end

apply it

curl localhost

he resources are applied in the order they are specified in the recipe. So here the apt cache is updated, the package is installed, then the service is configured, and finally the home page is set. If any resource is already in the desired state, Chef simply moves on to the next one.

The same idea applies to the action list [:enable, :start] for configuring the service. The service is enabled when the server boots and then it's started.

It's important to always think about how you order things. For example, the recipe wouldn't work if we tried to configure the Apache service before the package is even installed.


lynx localhost/index.html
